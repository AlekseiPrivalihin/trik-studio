	class @@ElementName@@ : public ElementImpl {
	public:
		void init(QRectF &, QList<StatPoint> &, QList<StatLine> &,
				LabelFactoryInterface &, QList<LabelInterface*> &,
				SdfRendererInterface *, SdfRendererInterface *, ElementRepoInterface *) {}

		void init(LabelFactoryInterface &factory, QList<LabelInterface*> &titles)
		{
@@EdgeInit@@
		}

		virtual ~@@ElementName@@() {}

		void paint(QPainter *, QRectF &){}
		bool isNode() const { return false; }
		bool isContainer() const { return false; }
		bool isSortingContainer() const { return false; }
		QVector<int> sizeOfForestalling() const {
			QVector<int> result;
			return result;
		}
		int sizeOfChildrenForestalling() const { return 0; }
		bool hasMovableChildren() const { return false; }
		bool minimizesToChildren() const { return false; }
		bool isClass() { return false; }
		bool maximizesChildren() const { return false; }
		bool isPort() const { return false; }
		bool hasPin() const { return false; }
		bool isResizeable() const { return true; }
		int getPenWidth() const { return 1; }
		QColor getPenColor() const { return QColor(); }
		bool isDividable() const { return false; }
		QList<double> border () const
		{
			QList<double> list;
			list << 0 << 0 << 0 << 0;
			return list;
		}
		bool hasPorts() const { return false; }
		Qt::PenStyle getPenStyle() const { return @@LineType@@; }
		QStringList bonusContextMenuFields() const
		{
			return QStringList();
		}

	protected:
		virtual void drawStartArrow(QPainter * painter) const 
		{
			QBrush old = painter->brush();
			QBrush brush;
			brush.setStyle(Qt::SolidPattern);
@@BeginArrowBrushColor@@			
			painter->setBrush(brush);
@@BeginArrowCustomization@@
			painter->setBrush(old);
		}

		virtual void drawEndArrow(QPainter * painter) const
		{
			QBrush old = painter->brush();
			QBrush brush;
			brush.setStyle(Qt::SolidPattern);
@@EndArrowBrushColor@@			
			painter->setBrush(brush);
@@EndArrowCustomization@@
			painter->setBrush(old);
		}

		void updateData(ElementRepoInterface *repo) const
		{
@@UpdateData@@
		}

	private:
@@LabelDefinition@@
	};
